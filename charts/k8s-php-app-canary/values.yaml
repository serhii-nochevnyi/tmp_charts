### GLOBAL ###
global:
  # (Required) The name of application.
  app_name:

  # (Required) K8S namespace where application is running.
  namespace:

  # (Required) An environment name, e.g. stage, prod, hf, rc, etc.
  environment:

  # (Optional) Application's family name.
  # In case of empty value `service_name` is generated as `$environment-$app_name`
  family_name:

  # (Optional)
  # Prefix for the custom and external metrics
  metric_prefix: "promrule"

  # Migrations
  migration:
    # (Optional) Enable migration job
    enabled: false

    # (Optional) Specifies the duration in seconds that the job
    # may be active before the system tries to terminate it; value must be
    # positive integer
    ttl: 600

  # PostSync ArgoCD hook to notify QA Jenkins. https://pdffiller.atlassian.net/browse/INFRA-28609
  postsync:
    # (Optional) Enable postsync job
    enabled: true

    # (Optional) Specifies the duration in seconds that the job
    # may be active before the system tries to terminate it; value must be
    # positive integer
    ttl: 10

  # Canary parameters
  canary:
    # (Optional) Enable/disable canary strategy.
    # if `false` classical RollingUpdate will be in place.
    # if `true` `global.canary.image` has higher priority than `global.image`
    enabled: false
    # (Optional) Sets the ratio of canary ReplicaSet
    # Positive integer from 0 to 100
    weight: 10
    image:
      # (Required) Docker image repo name.
      repository:
      # (Required) Docker image tag
      tag:

  image:
    # (Required) Docker image repo name.
    repository:

    # (Optional) Image pull policy in Kubernetes.
    # Possible values are `IfNotPresent`, `Always`, `Never`,  or  the empty string
    # (in this case Always will be used if :latest tag is specified, or IfNotPresent otherwise).
    pullPolicy: IfNotPresent

    # (Required) Docker image tag
    tag:

  serviceMesh:
    # (Optional). Enable Istio service mesh.
    enabled: true

    # (Optional) Enable service mesh gateway.
    mesh: true

     # (Optional) A list of service mesh gateways' names.
    gateways: []

    # (Optional) A list of service hostnames.
    hosts: []

  # (Optional) Service Account to associate with pods
  serviceAccountName:

  # (Optional) Map of paths where app, nginx and php logs to be mounted outside containers.
  # These kyes  are REQUIRED for the Chart and set as default:
  logs:
    app: "/var/log/k8s/apps/app_json"
    nginx: "/var/log/k8s/apps/nginx"
    php: "/var/log/k8s/apps/php"

  # (Required) An extra labels for metadata for all k8s objects
  labels:
    infra: "undefined"
    team: "undefined"

  # (Optional) A global key/value map of the container environment variables.
  env_vars: []

# (Optional) A key/value map of the container environment variables.
env_vars: []

# (Optional) A list of application config maps having environments variables.
# Chart uses both default and `env_config_maps` config maps.
# Defaults config maps are `family.
env_config_maps: []

# (Optional)  A list of application secret maps having environments variables.
# Chart uses both default and `env_secrets` secrets.
# Default secret map is `app.$app_name`
env_secrets: []

# (Optional) Disable default config maps and secrets maps,
# and set a list of own maps in variables `$env_config_maps` and `$env_secrets`.
# Defaults config maps are `family.$family_name` and `app.$app_name`.
# Default secret map is `app.$app_name`.
disable_default_env_from: false

# Example:
# env_vars:
# - name: far
#   value: bar
# - name: zoo
#   value: boo

# env_config_maps:
# - my.family.api
# - my.app.slates

# env_secrets:
# - my.app.slates

# (Optional) Run app in worker mode.
enabled: true

# (Optional) Number of desired pods.
replicas: 2

# (Optional) Enable using node local dns, eg. `unbound`.
nodeLocalDns: true

# (Optional) Application port inside container
appPort: 80

# (Optional) Application port outside container
servicePort: 80

# (Optional) URL endpoint to get app status
statusPath: "/status"

roadrunner:
  metrics:
    # (Optional) For scraping metrics on roadrunner port
    enabled: false
    # (Optional) port of roadrunner metrics
    port: 2112
    path: "/metrics"

metric:
  # (Optional) App has endpoint for metrics.
  enabled: true

  # (Optional) App endpoint to scape metrics.
  path: "/metrics"

rollingUpdate:
  # (Optional) The maximum number of pods that can be scheduled above the desired number of pods.
  # Present only if `replicas` > 1
  # https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy).
  maxSurge: 0

  # (Optional) The maximum number of pods that can be unavailable during the update.
  # Present only if `replicas` > 1
  # https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  maxUnavailable: 50%

podantiaffinity:
  # (Optional) Enable PodAntiAffinity.
  enabled: true

  # (Optional) PodAntiAffinity type. Possible values: `"preffered"` and `"required"`.
  # https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  type: preffered

autoscaling:
  # (Optional) Enable horizontal pod autoscaler.
  # Currently HPA supports only CPU metric.
  enabled: false

  # (Optional) Minimal limit for the number of pods that can be set by the autoscaler.
  minReplicas: 2

  # (Optional) Upper limit for the number of pods that can be set by the autoscaler.
  maxReplicas: 2

  # (Optional) Target average CPU utilization (represented as a percentage of requested CPU).
  # To disable scaling on CPU, set value to 0.
  cpuPercent: 0

  # (Optional): Promql expression for metric
  # example: airslate_rabbit_queue_total{app="airSlate Addons",queue_name="addons-webhooks-responses"}
  expr: ""
  # Threshold for scaling. Default 10000
  value: "10000"

  # HPA scaling behavior
  # https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#configurable-scaling-behavior
  # kubectl explain hpa.spec.behavior --api-version autoscaling/v2beta2
  scaleUp:
    stabilizationWindowSeconds: 0
    policies:
    - type: Pods
      value: 1
      periodSeconds: 15
    selectPolicy: Max

  scaleDown:
    stabilizationWindowSeconds: 300
    policies:
      - type: Pods
        value: 1
        periodSeconds: 30
    selectPolicy: Min

resources:
  requests:
    # (Optional) CPU request to run app on k8s.
    cpu: 100m

    # (Optional) MEM request to run app on k8s.
    memory: 128Mi

    # (Optional) Ephemeral storage request to run app on k8s.
    ephemeralStorage: 1Gi

  limits:
    # (Optional) CPU limit of app.
    # In case of absence of this param, cpu limits will not be set.
    cpu:

    # (Optional) MEM limit of app.
    # In case of absence of this param, mem limits will not be set.
    memory:

    # (Optional) Ephemeral storage limits to run app on k8s.
    ephemeralStorage: 1Gi


envoy:
  # (Optional) List of envoy metrics which we want to collect.
  # https://www.envoyproxy.io/docs/envoy/latest/configuration/upstream/cluster_manager/cluster_stats
  metricsSuffixes: "upstream_rq_1xx,upstream_rq_2xx,upstream_rq_3xx,upstream_rq_4xx,upstream_rq_5xx,upstream_rq_time"

  resources:
    requests:
      # (Optional) Specifies the requested CPU setting for the Envoy sidecar.
      # In case of absence of this param, cpu requestwill not be set.
      cpu:

      # (Optional) Specifies the requested memory setting for the Envoy sidecar.
      # In case of absence of this param, mem request will not be set.
      mem:

    limits:
      # (Optional) Specifies the CPU limit for the Envoy sidecar.
      # In case of absence of this param, cpu limit will not be set.
      cpu:

      # (Optional) Specifies the memory limit for the Envoy sidecar.
      # In case of absence of this param, mem limits will not be set.
      mem:

exporter:
  # (Optional) Enable php-fpm_exporter.
  enabled: false
  # (Optional) Exporter image.
  image: "hipages/php-fpm_exporter:2.0.3"
  # (Optional) Exporter port.
  port: 9253
  # (Required) Version of php app to form fpm socket name.
  phpVersion:
  # (Optional) Path under which to expose metrics.
  path: "/metrics"
  # (Optional) # Only log messages with the given severity or above.
  # Valid levels: [debug, info, warn, error, fatal] (default "error")
  logLevel: info
  # (Optional) Path to fpm socket in container.
  socketPath: /var/run/php
  # (Optional) Enable to calculate process numbers via php-fpm_exporter since PHP-FPM sporadically reports wrong
  # active/idle/total process numbers.
  fixProcessCount: true

  resources:
    requests:
      # (Optional) Specifies the requested CPU setting for the php-fpm-exporter sidecar.
      cpu: 40m

      # (Optional) Specifies the requested memory setting for the php-fpm-exporter sidecar.
      mem: 32Mi

    limits:
      # (Optional) Specifies the CPU limit for the php-fpm-exporter sidecar.
      cpu: 40m

      # (Optional) Specifies the memory limit for the php-fpm-exporter sidecar.
      mem: 32Mi

  readinessProbe:
    # (Optional) Minimum consecutive failures for the probe to be considered failed after having succeeded.
    failureThreshold: 3

    # (Optional) Number of seconds after the container has started before liveness probes are initiated.
    initialDelaySeconds: 10

    # (Optional) How often (in seconds) to perform the probe.
    periodSeconds: 5

    # (Optional) Minimum consecutive successes for the probe to be considered successful after having failed.
    successThreshold: 2

    # (Optional) Number of seconds after which the probe times out.
    timeoutSeconds: 3

  livenessProbe:
    # (Optional) Minimum consecutive failures for the probe to be considered failed after having succeeded.
    failureThreshold: 60

    # (Optional) Number of seconds after the container has started before liveness probes are initiated.
    initialDelaySeconds: 10

    # (Optional) How often (in seconds) to perform the probe.
    periodSeconds: 10

    # (Optional) Minimum consecutive successes for the probe to be considered successful after having failed.
    successThreshold: 1

    # (Optional) Number of seconds after which the probe times out.
    timeoutSeconds: 3

readinessProbe:
  # (Optional) Minimum consecutive failures for the probe to be considered failed after having succeeded.
  failureThreshold: 3

  # (Optional) Number of seconds after the container has started before liveness probes are initiated.
  initialDelaySeconds: 10

  # (Optional) How often (in seconds) to perform the probe.
  periodSeconds: 5

  # (Optional) Minimum consecutive successes for the probe to be considered successful after having failed.
  successThreshold: 2

  # (Optional) Number of seconds after which the probe times out.
  timeoutSeconds: 3

livenessProbe:
  # (Optional) Minimum consecutive failures for the probe to be considered failed after having succeeded.
  failureThreshold: 60

  # (Optional) Number of seconds after the container has started before liveness probes are initiated.
  initialDelaySeconds: 10

  # (Optional) How often (in seconds) to perform the probe.
  periodSeconds: 10

  # (Optional) Minimum consecutive successes for the probe to be considered successful after having failed.
  successThreshold: 1

  # (Optional) Number of seconds after which the probe times out.
  timeoutSeconds: 3

# (Optional) Duration in seconds the pod needs to terminate gracefully
terminationGracePeriodSeconds: 30

# (Optional) Allow to use spot instances
spot:
  enabled: true

### InitContainers
init_container:
  # (Optional) Enable init container.
  enabled: false
  # (Optional) Init container image.
  image:

  # (Optional) init container resources.
  resources:
    requests:
      # (Optional) Specifies the requested CPU setting for the initcontainer.
      cpu: 40m
      # (Optional) Specifies the requested memory setting for the initcontainer.
      mem: 32Mi
    limits:
      # (Optional) Specifies the CPU limit for the initcontainer.
      cpu:
      # (Optional) Specifies the memory limit for the initcontainer.
      mem:
